// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/types/destinations.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	types "github.com/cloudcloud/roadie/pkg/types"
	gomock "github.com/golang/mock/gomock"
)

// MockDestinationer is a mock of Destinationer interface.
type MockDestinationer struct {
	ctrl     *gomock.Controller
	recorder *MockDestinationerMockRecorder
}

// MockDestinationerMockRecorder is the mock recorder for MockDestinationer.
type MockDestinationerMockRecorder struct {
	mock *MockDestinationer
}

// NewMockDestinationer creates a new mock instance.
func NewMockDestinationer(ctrl *gomock.Controller) *MockDestinationer {
	mock := &MockDestinationer{ctrl: ctrl}
	mock.recorder = &MockDestinationerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDestinationer) EXPECT() *MockDestinationerMockRecorder {
	return m.recorder
}

// GetLocation mocks base method.
func (m *MockDestinationer) GetLocation() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLocation")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetLocation indicates an expected call of GetLocation.
func (mr *MockDestinationerMockRecorder) GetLocation() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLocation", reflect.TypeOf((*MockDestinationer)(nil).GetLocation))
}

// GetRefs mocks base method.
func (m *MockDestinationer) GetRefs() []types.Reference {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRefs")
	ret0, _ := ret[0].([]types.Reference)
	return ret0
}

// GetRefs indicates an expected call of GetRefs.
func (mr *MockDestinationerMockRecorder) GetRefs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRefs", reflect.TypeOf((*MockDestinationer)(nil).GetRefs))
}

// RemoveFile mocks base method.
func (m *MockDestinationer) RemoveFile(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveFile", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveFile indicates an expected call of RemoveFile.
func (mr *MockDestinationerMockRecorder) RemoveFile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFile", reflect.TypeOf((*MockDestinationer)(nil).RemoveFile), arg0)
}

// Type mocks base method.
func (m *MockDestinationer) Type() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Type")
	ret0, _ := ret[0].(string)
	return ret0
}

// Type indicates an expected call of Type.
func (mr *MockDestinationerMockRecorder) Type() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Type", reflect.TypeOf((*MockDestinationer)(nil).Type))
}
